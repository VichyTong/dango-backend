## DSL Functions:
Common Definitions:
- label: Refers to a row or column in the table. If the label is the name of a row or column, it should be a string. If the label is the index of a row or column, it should be an integer.
- axis: Refers to the direction of the operation.
  - 0 or "index": Indicates a row operation.
  - 1 or "columns": Indicates a column operation.

Note: There can be natural language "condition" in the DSL functions. The condition is a string that describes the condition to be met for the operation to be executed.

### Table-level Functions

1. create_table(table_name, row_number, column_number): Creates a new empty table with the specified number of rows and columns.
Parameters:
- table_name (str): The name of the new table to be created. The table name should end with ".csv".
- row_number (int): The number of rows in the table.
- column_number (int): The number of columns in the table.

2. delete_table(table_name): Deletes the specified table.
Parameters:
- table_name (str): The name of the table to be deleted.

3. pivot_table(table, index, columns, values, aggfunc): Reshapes the table so that each unique 'columns' value becomes a separate column, with the 'index' values as row headers, and the corresponding 'values' filled in their respective cells.
Parameters:
- table (DataFrame): The table to pivot.
- index (str): The column name to use as the new row headers.
- columns (str): The column name to use as the new column headers.
- values (str): The column name whose values will fill the new table.
- aggfunc (str): The aggregation function to apply to the values. Common options are 'first', 'sum', 'mean', etc.

### Column/Row-level Functions

1. insert(table_name, index, index_name, axis): Inserts an empty row or column at the specified index in the table.
Parameters:
- table_name (str): The name of the table to insert the row/column into.
- index (int): The index at which the row/column will be inserted.
- index_name (str): The name of the new row/column.
- axis (str or int):
    - 0 or "index": Indicates to insert a row.
    - 1 or "columns": Indicates to insert a column.

2. drop(table_name, label, axis): Drops one or more rows or columns in the table.
Parameters:
- table_name (str): The name of the table to drop the row/column from.
- label (str or int or list[str] or list[int]): The label or list of labels of the row/column to be dropped.
- axis (str or int):
    - 0 or "index": Indicates to drop one or more rows.
    - 1 or "columns": Indicates to drop one or more columns.

3. assign(table_name, start_row_index, end_row_index, start_column_index, end_column_index, values): Assigns constant values to specific cells in the table.
Parameters:
- table_name (str): The name of the table to assign the value to.
- start_row_index, end_row_index (int): The range of row indices to assign the value to.
- start_column_index, end_column_index (int): The range of column indices to assign the value to.
- values (list[list[int/float/str]] or int/float/str): The const value(s) to assign to the specified cell(s). Can be a single int/float/str or a list of lists of int/float/str. The order of values is from top to bottom, left to right.

4. move(origin_table_name, origin_index, target_table_name, target_index, axis): Moves a row or column from the origin table to the target table.
Parameters:
- origin_table_name (str): The name of the table from which the row/column will be moved.
- origin_index (int): The index of the row/column to be moved.
- target_table_name (str): The name of the table to which the row/column will be moved.
- target_index (int): The index at which the row/column will be moved in the target table.
- axis (str or int):
    - 0 or "index": Indicates to move a row.
    - 1 or "columns": Indicates to move a column.

5. copy(origin_table_name, origin_index, target_table_name, target_index, target_label_name, axis): Copies a row or column from the origin table to the target table at the specified index.
Parameters:
- origin_table_name (str): The name of the table from which the row/column will be copied.
- origin_index (int): The index of the row/column to be copied.
- target_table_name (str): The name of the table to which the row/column will be copied.
- target_index (int): The index at which the row/column will be copied in the target table.
- target_label_name (str): The name of the new row/column in the target table.
- axis (str or int):
    - 0 or "index": Indicates to copy a row.
    - 1 or "columns": Indicates to copy a column.

6. swap(table_name_a, label_a, table_name_b, label_b, axis): Swaps rows or columns between two tables.
Parameters:
- table_name_a (str): The first table from which the row/column will be swapped.
- label_a (str or int): The label of the row/column to be swapped in the first table.
- table_name_b (str): The second table from which the row/column will be swapped.
- label_b (str or int): The label of the row/column to be swapped in the second table.
- axis (str or int):
    - 0 or "index": Indicates to swap rows.
    - 1 or "columns": Indicates to swap columns.

7. merge(table_name_a, table_name_b, on, how, axis): Merges two tables based on a common column or along columns.
Parameters:
- table_name_a (str): The first table to merge.
- table_name_b (str): The second table to merge.
- on (list[str]): The column or index level name to join on (ignored if axis=1).
- how (str): The type of merge to perform ('inner', 'outer', 'left', 'right').
- axis (str or int):
    - 0 or "index": Indicates to merge along rows.
    - 1 or "columns": Indicates to merge along columns.

8. transpose(table_name): Transposes the given table.
Parameters:
- table_name (str): table to be transposed.

9. rearrange(table_name, by_values=None, by_array=None, axis): Rearranges the rows or columns of the table based on the specified order.
Parameters:
- table_name (str): table to be rearranged.
- by_values (str, optional): If this parameter is set, the rows/columns will be rearranged based on the values in the specified row/column.
- by_array (str, list[str/int]): If this parameter is set, the rows/columns will be rearranged based on the order of the values in the array.
- axis (str or int):
    - 0 or "index": Indicates to rearrange rows.
    - 1 or "columns": Indicates to rearrange columns.

10. divide(table, by, axis): Divides the table by values of a row or column and saves each group to a separate table.
Parameters:
- table (str): table to be divided.
- by (str): Column/Row name to group the table by.
- axis (str or int):
    - 0 or "index": Indicates to divide the table by a row.
    - 1 or "columns": Indicates to divide the table by a column.

11. fill(table, method, column=None): Fills missing values in the table using the specified method.
Parameters:
- table (str): Table to fill missing values.
- method (str): The method to use for filling missing values. Choose from 'value', 'mean', 'median', 'mode', 'ffill', 'bfill', 'interpolate'.
- column: The column to fill missing values in. If None, missing values in all columns will be filled.

### Summarization Functions

1. aggregate(table_name, functions, axis): Aggregates the table using the specified function.
Parameters:
- table_name (str): table to be aggregated.
- functions (dict): Keys are names of rows or columns, and values are lists of function names. Example: {'A': ['sum', 'mean'], 'B': ['min', 'max']}.
- axis (str or int):
    - 0 or "index": Indicates to aggregate rows.
    - 1 or "columns": Indicates to aggregate columns.

2. test(table_name, label_a, label_b, strategy, axis): Returns a new result table by comparing two labels using the specified strategy.
Parameters:
- table_name (str): table on which the test will be performed.
- label_a (str or int): The label of the first row/column to be tested.
- label_b (str or int): The label of the second row/column to be tested.
- strategy (str): The statistical test to perform ('t-test', 'z-test', 'chi-squared').
- axis (str or int):
    - 0 or "index": Indicates to test rows.
    - 1 or "columns": Indicates to test columns.

### String Functions

1. concatenate(table_name, label_a, label_b, glue, new_label, axis): Concatenates two labels and appends the merged label to the table.
Parameters:
- table_name (str): table in which the rows/columns will be concatenated.
- label_a (str or int): The label of the first row/column to be concatenated.
- label_b (str or int): The label of the second row/column to be concatenated.
- glue (str): The string to be used to concatenate the two rows/columns.
- new_label (str or int): The label of the new row/column created by the concatenation.
- axis (str or int):
    - 0 or "index": Indicates to concatenate rows.
    - 1 or "columns": Indicates to concatenate columns.

2. split(table_name, label, delimiter, new_labels, axis): Splits a label into multiple parts at each occurrence of the specified delimiter.
Parameters:
- table_name (str): table in which the row/column will be split.
- label (str or int): The label of the row/column to be split.
- delimiter (str): The delimiter used to split the row/column strings.
- new_labels (list[str]): List of new labels for the resulting split rows/columns.
- axis (str or int):
    - 0 or "index": Indicates to split a row.
    - 1 or "columns": Indicates to split a column.

3. format(table, label, pattern, replace_with, axis): Formats the values in a row or column based on the specified pattern and replace_with using re.sub().
Parameters:
- table (str): DataFrame in which the row/column will be formatted.
- label (str or int): The label of the row/column to be formatted.
- pattern (str): The format regex pattern to apply to the values, You can use group syntax.
- replace_with (str): The string or backreference to replace the matched pattern with.
- axis (str or int):
    - 0 or "index": Indicates to format a row.
    - 1 or "columns": Indicates to format a column.
# CONTEXT #
You are a professional DSL (Domain Specific Language) expert.
Your task is to give feedback to a generated DSL based on the provided sheet information and DSL definition.

#############

# OBJECTIVE #
Find semantic errors and give feedback on generated DSL.

#############

# DSL GRAMMAR #

{DSL_GRAMMAR}

#############

# INPUT #
- Sheet Information: The name of the sheet, the headers, and the number of rows in the table.
- User Instruction: The specific operation that the user wants to perform on the sheet.
- User Intent: A summary of what the user wants to achieve with the DSL.
- Generated DSL: The DSL code generated to fulfill the user's intent.

# OUTPUT #

- Correctness: A "Yes" or "No" answer indicating whether the generated DSL is correct based on the user's intent.
- DSL Feedback: If the DSL is incorrect, the feedback should provide details on the errors and suggest corrections.
You need to output in this json form:
{
    "correctness": "<Yes/No>",
    "feedback": {
        "error": {
            "error_type": "<Error Type>",
            "function_name": "<Function Name>", # Optional
            "error_message": "<Error Message>"
        }
    }
}

#############
# GUIDELINES #
1. There can be "condition" for every column/row function in the DSL.

#############

# EXAMPLES #

Example 1:
'''
- INPUT:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 14 columns (Headers are: A: "age", B: "sex", C: "cp", D: "trestbps", E: "chol", F: "fbs", G: "restecg", H: "thalach", I: "exang", J: "oldpeak", K: "slope", L: "ca", M: "thal", N: "target") and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Transposes the table.

User Intent: The user wants to transpose the table.

Generated DSL:
```
[
    {
        "function_name": "drop",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
            "index"
        ]
    }
]
```

- OUTPUT:
{
    "correctness": "No",
    "feedback": {
        "error": {
            "error_type": "Semantic Error",
            "function_name": "drop",
            "error_message": "The 'drop' function is used incorrectly. The 'drop' function is meant to remove rows or columns from a table, not transpose the table. You should use the 'transpose' function to transpose the table."
        }
    }
}
'''

Example 2:
'''
- INPUT:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 14 columns (Headers are: A: "age", B: "sex", C: "cp", D: "trestbps", E: "chol", F: "fbs", G: "restecg", H: "thalach", I: "exang", J: "oldpeak", K: "slope", L: "ca", M: "thal", N: "target") and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Concatenate column "age" and "sex" to "{age}, {sex}" if there is no missing value in the columns.

User Intents: The user wants to concatenate the "age" and "sex" with a comma and space if there are no missing values in the columns.

Generated DSL:
```
[
    {
        "function_name": "concatenate",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            "age",
            "sex",
            ", ",
            "age and sex",
            "columns"
        ]
    }
]
```

- OUTPUT:
{
    "correctness": "No",
    "feedback": {
        "error": {
            "error_type": "missing condition",
            "function_name": "concatenate",
            "error_message": "The 'concatenate' function requires a condition to check for missing values in the columns 'age' and 'sex'."
        }
    }
}
'''

Example 3
'''
Input:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 14 columns (Headers are: A: "age", B: "sex", C: "cp", D: "trestbps", E: "chol", F: "fbs", G: "restecg", H: "thalach", I: "exang", J: "oldpeak", K: "slope", L: "ca", M: "thal", N: "target") and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Delete the column "age" from the table.

User Intents: The user wants to delete the column "age" from the table.

Generated DSL:
```
[
    {
        "function_name": "drop",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            "age",
            "columns"
        ]
    }
]

- OUTPUT:
{
    "correctness": "Yes"
}
'''

#############
# CONTEXT #
You are a professional DSL (Domain Specific Language) expert.
Your task is to give feedback to a generated DSL based on the provided sheet information and DSL definition.

#############

# OBJECTIVE #
Find semantic errors and give feedback on generated DSL.

#############

# DSL GRAMMAR #

{DSL_GRAMMAR}

#############

# INPUT #
- Sheet Information: The name of the sheet, the headers, and the number of rows in the table.
- User Instruction: The specific operation that the user wants to perform on the sheet. (Optional)
- User Intent: A summary of what the user wants to achieve with the DSL.
- Generated DSL: The DSL code generated to fulfill the user's intent.

# OUTPUT #

- Correctness: A "Yes" or "No" answer indicating whether the generated DSL is correct based on the user's intent.
- DSL Feedback: If the DSL is incorrect, the feedback should provide details on the errors and suggest corrections.
You need to output in this json form:
{
    "correctness": "<Yes/No>",
    "feedback": {
        "error": {
            "error_type": "<Error Type>",
            "function_name": "<Function Name>", # Optional
            "error_message": "<Error Message>"
        }
    }
}

#############
# GUIDELINES #
1. If the user intends to perform conditional judgment (if statement) when operating a function, they can use "condition" in the DSL for certain functions.
Example:
[
    {
        "function_name": "drop",
        "condition": "if there are no missing values in the columns",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            [0, 1],
            "index"
        ]
    }
]
2. This DSL script is not the final program. It does not include the load table operations and the save table operations. The focus is on the operations performed on the table. Please ignore the missing load and save table operations.

#############

# EXAMPLES #

Example 1:
'''
- INPUT:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 14 columns (Headers are: 1: "age", 2: "sex", 3: "cp", 4: "trestbps", 5: "chol", 6: "fbs", 7: "restecg", 8: "thalach", 9: "exang", 10: "oldpeak", 11: "slope", 12: "ca", 13: "thal", 14: "target") and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Transposes the table.

User Intent: The user wants to transpose the table.

Generated DSL:
```
[
    {
        "function_name": "drop",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            [0, 1, 2, 3, 4, 5],
            "index"
        ]
    }
]
```

- OUTPUT:
{
    "correctness": "No",
    "feedback": {
        "error": {
            "error_type": "Semantic Error",
            "function_name": "drop",
            "error_message": "The 'drop' function is used incorrectly. The 'drop' function is meant to remove rows or columns from a table, not transpose the table. You should use the 'transpose' function to transpose the table."
        }
    }
}
'''

Example 2:
'''
- INPUT:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 15 columns (Headers are: 1: "age", 2: "sex", 3: "cp", 4: "trestbps", 5: "chol", 6: "fbs", 7: "restecg", 8: "thalach", 9: "exang", 10: "oldpeak", 11: "slope", 12: "ca", 13: "thal", 14: "target", the column 0 is the header column) and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Concatenate column "age" and "sex" to "{age}, {sex}" if there is no missing value in the columns.

User Intents: The user wants to concatenate the "age" and "sex" with a comma and space if there are no missing values in the columns.

Generated DSL:
```
[
    {
        "function_name": "concatenate",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            "age",
            "sex",
            ", ",
            "age and sex",
            "columns"
        ]
    }
]
```

- OUTPUT:
{
    "correctness": "No",
    "feedback": {
        "error": {
            "error_type": "missing condition",
            "function_name": "concatenate",
            "error_message": "The 'concatenate' function requires a condition to check for missing values in the columns 'age' and 'sex'."
        }
    }
}
'''

Example 3
'''
Input:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 15 columns (Headers are: 1: "age", 2: "sex", 3: "cp", 4: "trestbps", 5: "chol", 6: "fbs", 7: "restecg", 8: "thalach", 9: "exang", 10: "oldpeak", 11: "slope", 12: "ca", 13: "thal", 14: "target", the column 0 is the header column) and 303 rows (0 to 302, the row 0 is the header row).

User Instruction: Delete the column "age" from the table.

User Intents: The user wants to delete the column "age" from the table.

Generated DSL:
```
[
    {
        "function_name": "drop",
        "arguments": [
            "Heart Disease Prediction dataset.csv",
            "age",
            "columns"
        ]
    }
]

- OUTPUT:
{
    "correctness": "Yes"
}
'''

Example 4
'''
Input:
# Sheet 1
Sheet Information: Test_v1.csv has 5 columns (Headers are: 1: "name", 2: "brithday", 3: "gender", 4: "grade", the column 0 is the header column) and 15 rows (0 to 14, the row 0 is the header row).

User Instruction: Divide the table based on the column "gender" into two tables, save them as "male.csv" and "female.csv".

User Intents: The user wants to divide the table based on the column "gender" into two tables, named them as "male.csv" and "female.csv".

Generated DSL:
```
[
    {
        "function_name": "divide",
        "arguments": [
            "Test_v1.csv",
            "gender",
            1
        ]
    }
]

- OUTPUT:
{
    "correctness": "Yes"
}
'''

#############
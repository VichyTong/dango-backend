# CONTEXT #
You are a professional programmer.
You will be given a condition in natural language.
You need to create a function that takes a DataFrame as input and outputs a boolean indexing based on the given condition.

#############

# OBJECTIVE #
Create a function that returns a boolean indexing based on the given condition.

#############

# INPUT #
A condition in natural language.

#############

# OUTPUT #
Your output should contain two parts:
- The first line should be "Type: row" or "Type: column" based on the condition.
- Then, a function that returns a boolean index between two ``` characters.

example:
Type: row/column
```
def boolean_indexing(df):
    return df[df['column_name'] > 5]
```

#############

# EXAMPLE #

Example 1:
'''
- INPUT:
rows where column 'a' is less than 10
- OUTPUT:
Type: row
```
def boolean_indexing(df):
    return df['a'] < 10
```
'''

Example 2:
'''
- INPUT:
rows where sum of all columns is lower than 10.
- OUTPUT:
Type: row
```
def boolean_indexing(df):
    return df.sum(axis=1) < 10
```
'''

Example 3:
'''
- INPUT:
rows where column 'b' is equal to 'apple'
- OUTPUT:
Type: row
```
def boolean_indexing(df):
    return df['b'] == 'apple'
```
'''

Example 4:
'''
- INPUT:
columns where its name contains the string 'name'
Type: column
- OUTPUT:
```
def column_selection_example_2(df):
    return df.columns.str.contains('name')
```
'''

Example 5:
'''
- INPUT:
columns where any value is null
- OUTPUT:
Type: column
```
def boolean_indexing(df):
    return df.isnull().any()
```
'''

Example 6:
'''
- INPUT:
columns where any value is between 5 and 15 (inclusive)
- OUTPUT:
Type: column
```
def boolean_indexing(df):
    return df.apply(lambda x: x.between(5, 15).any())
```
'''
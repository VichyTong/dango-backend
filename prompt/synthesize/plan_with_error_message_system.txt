# CONTEXT #
You are a professional data scientist.
Your task is to generate a step-by-step plan to clean the data based on the user's intents and a error message from the last step-by-step plan.

#############

# OBJECTIVE #
Generate a step-by-step plan to clean the data based on the user's intents.

#############

# DSL GRAMMAR #

{DSL_GRAMMAR}

#############

# GUIDELINES #
1. You should specify the DSL function after the description. Do not add or invent new functions.
2. You should point out the arguments for each function based on the given description.
3. Please attention that the row index starts from 0, which is the header row. The column index starts from 1.

#############

# INPUT #
- Sheet Information: the name of the sheet, the headers, and the number of rows in the table.
- User Intents: the user's intents.
- Last step-by-step plan: a JSON list. Each step should include the function name and its description.
- Error Message: the error message from the last generation.

# OUTPUT #
- Step-by-step plan: a JSON list.
    - Each step should only include the function name and its description.
    - If there are multiple steps, list them in the order they should be executed.

Example format:
[
    {
        "function": "function_name",
        "description": "step_description"
    }
]

#############

# EXAMPLES #

Example 1:
'''
- INPUT:
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 3 columns (Headers are: 1: "age", 2: "sex", 3: "cp", 4: "trestbps") and 303 rows (the row 0 is the header row).

User Intents: The user's intent is to delete all the columns except "age" and "sex".

Last generated step-by-step plan:
[
    "function": "drop",
    "description": "Drop all columns except \"age\" and \"sex\" in Heart Disease Prediction dataset.csv."
]

Error Message:
Error 1:
- Error Type: semantic error
- Function Name: drop
- Message: The drop function can only drop one column at one time. Please consider to use drop function multiple times.

- OUTPUT:
[
    {
        "function": "drop",
        "description": "Drop the column \"cp\" from Heart Disease Prediction dataset.csv."
    },
    {
        "function": "drop",
        "description": "Drop the column \"trestbps\" from Heart Disease Prediction dataset.csv."
    }
]
'''

Example 2:
'''
# Sheet 1
Sheet Information: Heart Disease Prediction dataset.csv has 14 columns (Headers are: 1: "age", 2: "sex", 3: "cp", 4: "trestbps", 5: "chol", 6: "fbs", 7: "restecg", 8: "thalach", 9: "exang", 10: "oldpeak", 11: "slope", 12: "ca", 13: "thal", 14: "target") and 303 rows (0 to 302, the row 0 is the header row).

User Intents: The user wants to concatenate the "age" and "sex" with a comma and space if there are no missing values in the columns.

Last generated step-by-step plan:
[
    "function": "concatenate",
    "description": "Concatenate the columns \"age\" and \"sex\" in Heart Disease Prediction dataset.csv with a comma and space if there are no missing values."
]

Error Message:
Error 1:
- Error Type: missing condition
- Function Name: concatenate
- Message: The 'concatenate' function requires a condition to check for missing values in the columns 'age' and 'sex'.

- OUTPUT:
[
    "function": "concatenate",
    "description": "Concatenate the columns \"age\" and \"sex\" in Heart Disease Prediction dataset.csv with a comma and space. Use a condition argument in this function to check for missing values."
]

'''
#############
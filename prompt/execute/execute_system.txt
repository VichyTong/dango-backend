# CONTEXT #
You are a professional DSL (Domain Specific Language) expert.
You will be given a required table list, a DSL functions list in a JSON list format, and a step-by-step plan.
You need to create a small Python code snippet that executes the given DSL function.

#############

# OBJECTIVE #
Create a small Python code snippet that executes the given DSL function.

#############

# DSL GRAMMAR #

{SELECTED_DSL_GRAMMAR}

#############

# GUIDELINES #
1. You can use load_table(table_name) function to load the table and save_table(data, table_name) function to save the table.

#############

# INPUT #
- Required Tables: A list of table names that are required to perform the DSL functions.
- DSL Program: A JSON list containing the DSL functions to be executed.
- Step-by-step Plan: A natural language description of the DSL functions to be executed.

#############

# OUTPUT #
Your output should between ``` tags and contain the Python code snippet that executes the given DSL function.

#############

# EXAMPLE #

Example 1:
'''
- INPUT:
Required Tables: 
["test_result_v0.csv", "data_v0.csv"]

DSL Program:
[
    {
        "function_name": "create",
        "arguments": ["test_result_v0.csv", 1, 2]
    },
    {
        "function_name": "test",
        "arguments": ["data_v0.csv", "age", "t-test", "columns"]
    },
    {
        "function_name": "assign",
        "arguments": ["test_result_v0.csv", 1, 1, 1, 1, "statistic"]
    },
    {
        "function_name": "assign",
        "arguments": ["test_result_v0.csv", 1, 1, 2, 2, "p_value"]
    }
]

Step-by-step Plan:
1. Create a new table name test_result.csv to store the test result. (create function)
2. Test the similarity between the columns "age" and "sex" in Heart Disease Prediction dataset.csv using t-test. (test function)
3. Assign the statistic and p-value to (1, 1) and (1, 2) in the test_result.csv table. (assign function)

- OUTPUT:
```
data = load_table("data_v0.csv")
test_result = create("test_result_v0.csv", 1, 2)

statistic, p_value = test(data, "age", "t-test", "columns")
test_result = assign(test_result, 1, 1, 1, 1, statistic)
test_result = assign(test_result, 1, 1, 2, 2, p_value)

save_table(test_result, "test_result_v0.csv")
```
'''

Example 2:
'''
- INPUT:
Required Tables: 
["Heart Disease Prediction dataset_v1.csv", "New_v0.csv"]

DSL Program:
[
    {
        "function_name": "copy",
        "arguments": ["Heart Disease Prediction dataset_v1.csv", "age", "New_v0.csv", "age", "columns"]
    },
    {
        "function_name": "copy",
        "arguments": ["Heart Disease Prediction dataset_v1.csv", "sex", "New_v0.csv", "sex", "columns"]
    },
    {
        "function_name": "drop",
        "arguments": ["Heart Disease Prediction dataset_v1.csv", "age", "columns"]
    },
    {
        "function_name": "drop",
        "arguments": ["Heart Disease Prediction dataset_v1.csv", "sex", "columns"]
    }
]

Step-by-step plan:
1. Copy the column "age" from Heart Disease Prediction dataset.csv to New.csv. (copy function)
2. Copy the column "sex" from Heart Disease Prediction dataset.csv to New.csv. (copy function)
3. Delete the column "age" from Heart Disease Prediction dataset.csv. (drop function)
4. Delete the column "sex" from Heart Disease Prediction dataset.csv. (drop function)

- OUTPUT:
```
Heart_Disease_Prediction_dataset = load_table("Heart Disease Prediction dataset_v1.csv")
New = load_table("New_v0.csv")

New = copy(Heart_Disease_Prediction_dataset, "age", New, "age", "columns")
New = copy(Heart_Disease_Prediction_dataset", "sex", New, "sex", "columns")
Heart_Disease_Prediction_dataset = drop(Heart_Disease_Prediction_dataset, "age", "columns")
Heart_Disease_Prediction_dataset = drop(Heart_Disease_Prediction_dataset, "sex", "columns")

save_table(Heart_Disease_Prediction_dataset, "Heart Disease Prediction dataset_v1.csv")
save_table(New, "New_v0.csv")
```
'''

Example 3:
'''
- INPUT:
Required Tables: 
["sales_data_v0.csv", "employees_v0.csv"]

DSL Program:
[
    {
        "function_name": "drop",
        "condition": "if column \"Revenue\" < 500",
        "arguments": ["sales_data_v0.csv", "Revenue", "index"]
    },
    {
        "function_name": "split",
        "condition": "if column \"FullName\" contains \" \"",
        "arguments": ["employees.csv_v0", "FullName", " ", ["FirstName", "LastName"]]
    }
]

Step-by-step plan:
1. Drop rows in sales_data.csv where the column "Revenue" is less than 500. (drop function)
2. Split the column "FullName" in employees.csv into two columns "FirstName" and "LastName" if it contains a space. (split function)

- OUTPUT:
```
sales_data = load_table("sales_data_v0.csv")
employees = load_table("employees_v0.csv")

for index, row in sales_data.iterrows():
    if row["Revenue"] < 500:
        sales_data = drop(sales_data, index, "index")

employees = split(employees, "FullName", " ", "columns", ["FirstName", "LastName"])

save_table(sales_data, "sales_data_v0.csv")
save_table(employees, "employees_v0.csv")
```
'''